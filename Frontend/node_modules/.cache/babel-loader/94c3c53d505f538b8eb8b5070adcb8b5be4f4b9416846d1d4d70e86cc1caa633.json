{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shrey\\\\OneDrive\\\\Desktop\\\\Learn-React\\\\Inotebook\\\\inotebook\\\\src\\\\Context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from \"react\";\nimport NoteContext from \"./NoteContext\";\nimport AlertContext from \"../alert/AlertContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = 'http://localhost:5000';\n  const {\n    showAlert\n  } = useContext(AlertContext);\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // for fetching all notes\n  const getNotes = async () => {\n    // API Call to fetch all notes\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const jsonResData = await response.json();\n    setNotes(jsonResData);\n  };\n\n  // To Add a Note\n  const addNote = async (title, description, tag) => {\n    // API Call to add a new note\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const jsonData = await response.json();\n\n    //adding new note logic\n    const note = jsonData;\n    setNotes(notes.concat(note));\n    showAlert(\"Note added successfully\", \"success\");\n  };\n\n  // edit an existing note\n  const editnote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    for (let index = 0; index < notes.length; index++) {\n      const ele = notes[index];\n      if (ele._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n    showAlert(\"Note edited successfully\", \"success\");\n  };\n\n  // for deleting a note\n  const deletenote = async id => {\n    // Api call to delete note with this id\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n    showAlert(\"Note deleted successfully\", \"success\");\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      getNotes,\n      addNote,\n      editnote,\n      deletenote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"HaKkVhO7HxpM+UqxMlYZTokQVhg=\");\n_c = NoteState;\nexport default NoteState;\n\n// const s = {\n//     \"name\": \"abhi\",\n//     \"age\": \"19\"\n// };\n//make s state variable\n// const [state, setState] = useState(s);\n\n//update function to setState of s1\n// const update = () => {\n//     setTimeout(()=> {\n//         setState({\n//             \"name\": \"Larry\",\n//             \"age\": \"200\"\n//         })\n//     }, 3000);\n// }\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useContext","useState","NoteContext","AlertContext","NoteState","props","host","showAlert","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","jsonResData","json","addNote","title","description","tag","body","JSON","stringify","jsonData","note","concat","editnote","id","console","log","newNotes","parse","index","length","ele","_id","deletenote","filter","children"],"sources":["C:/Users/shrey/OneDrive/Desktop/Learn-React/Inotebook/inotebook/src/Context/notes/NoteState.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport NoteContext from \"./NoteContext\";\r\nimport AlertContext from \"../alert/AlertContext\";\r\n\r\nconst NoteState = (props) => {\r\n\r\n    const host = 'http://localhost:5000'\r\n    const {showAlert} = useContext(AlertContext)\r\n\r\n    const notesInitial = [];\r\n\r\n    const [notes,setNotes] = useState(notesInitial);\r\n\r\n\r\n    // for fetching all notes\r\n    const getNotes = async ()=>{\r\n        // API Call to fetch all notes\r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: 'GET',\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'auth-token': localStorage.getItem('token')\r\n            },\r\n        });\r\n        const jsonResData = await response.json();\r\n        setNotes(jsonResData);\r\n    }\r\n\r\n\r\n    // To Add a Note\r\n    const addNote = async (title,description,tag)=>{\r\n\r\n        // API Call to add a new note\r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'auth-token': localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({title,description,tag})\r\n        });\r\n        const jsonData = await response.json();\r\n\r\n        //adding new note logic\r\n        const note = jsonData;\r\n        setNotes(notes.concat(note));\r\n        showAlert(\"Note added successfully\",\"success\")\r\n    };\r\n\r\n     // edit an existing note\r\n     const editnote = async (id,title,description,tag)=>{\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'auth-token': localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({title,description,tag})\r\n          });\r\n          const json = await response.json();\r\n          console.log(json)\r\n\r\n          let newNotes = JSON.parse(JSON.stringify(notes));\r\n\r\n        for (let index = 0; index < notes.length; index++) {\r\n            const ele = notes[index];\r\n            if(ele._id===id){\r\n              newNotes[index].title=title;\r\n              newNotes[index].description=description;\r\n              newNotes[index].tag=tag;\r\n              break;\r\n            } \r\n        }\r\n        setNotes(newNotes);\r\n        showAlert(\"Note edited successfully\",\"success\")\r\n    };\r\n\r\n    // for deleting a note\r\n    const deletenote = async (id)=>{\r\n        // Api call to delete note with this id\r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'auth-token': localStorage.getItem('token')\r\n            },\r\n          });\r\n          const json = await response.json();\r\n          console.log(json)\r\n\r\n        const newNotes = notes.filter((note)=>{return note._id!==id})\r\n        setNotes(newNotes);\r\n        showAlert(\"Note deleted successfully\",\"success\")\r\n    }\r\n\r\n  return (\r\n    <NoteContext.Provider value={{notes,getNotes,addNote,editnote,deletenote}}>\r\n        {props.children}\r\n    </NoteContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NoteState\r\n\r\n\r\n\r\n    // const s = {\r\n    //     \"name\": \"abhi\",\r\n    //     \"age\": \"19\"\r\n    // };\r\n    //make s state variable\r\n    // const [state, setState] = useState(s);\r\n\r\n    //update function to setState of s1\r\n    // const update = () => {\r\n    //     setTimeout(()=> {\r\n    //         setState({\r\n    //             \"name\": \"Larry\",\r\n    //             \"age\": \"200\"\r\n    //         })\r\n    //     }, 3000);\r\n    // }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}